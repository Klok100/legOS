#ifndef _SCHED_H
#define _SCHED_H
#include "lib.h"

/* Most information found on osdev.org, at:             */
/* https://wiki.osdev.org/PIT                           */


/* Numbers relevant to setting the PIT command register */
/* The Mode/Command register contains the format        */
/* detailed under "I/O" ports on osdev.org provided     */
/* above. Fields for the command reigster:              */
/* Select Channel:  Set to 0 0 for Channel 0            */
/* Access Mode:     Set to 1 1 for lobyte/hibyte        */
/* Operating Mode:  Set to 0 1 1 for Mode 3             */
/* BCD/BInary Mode: Set to 0 for 16-bit binary          */
/* Result: +-- 0 0 --+-- 1 1 --+-- 0 1 1 --+-- 0 --+    */
#define PIT_COMMAND_REG         0x43
#define PIT_COMMAND_REG_VAL     0x36

#define CHANNEL_0               0x40

/* The oscillator runs used by the PIT chip runs        */
/* roughly at 1.193182 MHz. However, due to the 16-bit  */
/* limit of our register we cannot represent that value */
/* in its entirety. Thus, we utilize a freqency divider */
/* to obtain a slower frequency that is still accurate  */
/* enough for timekeeping.                              */
/* Frequency = 1193182 / (Reload Value) Hz              */
/* Set the Reload Value to get an acceptable frequency, */
/* rounded up.                                          */
#define RELOAD_VAL              11931        
#define RELOAD_MASK_LOWER       0x00FF
#define RELOAD_MASK_UPPER       0xFF00

/* Define as having the highest priority with the PIC   */
/* since we want to always switch to the next task      */
/* whenever an intterupt occurs                         */
#define PIT_IRQ_NUM             0

#define VIDEO_PAGE_NUM   0x8800000 >> 22
#define VIDEO_TABLE_NUM  0xB8
#define VIDEO_ALT_START  0xBA
#define VIDEO_VIRT_ADDR  0xB8
#define SCHED_FOUR_KB    0x1000
#define SCHED_FOUR_MB    0x00400000

/* Initializes the PIT (Programmable Interval Timer)    */
void PIT_init( void );

/* Called whenever an intterupt is generated by the PIT */
/* Will cause the next task in the round robin          */
/* scheduling to occur                                  */
void pit_handler( void );

/* Called by the pit_handler, initializes multiple      */
/* terminals and also sets up round robin scheduling    */
/* for multipell concurrent tasks                       */
void scheduler( void );

/* Sets characteristics and virtual memory address of   */
/* page to point to the video memory                    */
void set_video_page_to_reg( void );

/* Sets characteristis and virtual memory address of    */
/* page to point to the saved video memory coorsponding */
/* to the passed terminal                               */
void set_non_displayed_video_page( int terminal );


#endif
